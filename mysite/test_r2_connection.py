#!/usr/bin/env python
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Cloudflare R2
"""

import os
import boto3
from botocore.exceptions import ClientError

def test_r2_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ R2"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Cloudflare R2...")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    access_key = os.environ.get('AWS_ACCESS_KEY_ID')
    secret_key = os.environ.get('AWS_SECRET_ACCESS_KEY')
    bucket_name = os.environ.get('AWS_STORAGE_BUCKET_NAME')
    endpoint_url = os.environ.get('AWS_S3_ENDPOINT_URL')
    
    print(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"  - Bucket: {bucket_name}")
    print(f"  - Endpoint: {endpoint_url}")
    print(f"  - Access Key: {'*' * (len(access_key) - 4) + access_key[-4:] if access_key else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
    
    if not all([access_key, secret_key, bucket_name, endpoint_url]):
        print("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env.local –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç S3
        s3_client = boto3.client(
            's3',
            endpoint_url=endpoint_url,
            aws_access_key_id=access_key,
            aws_secret_access_key=secret_key,
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ bucket
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ bucket...")
        response = s3_client.head_bucket(Bucket=bucket_name)
        print(f"‚úÖ Bucket '{bucket_name}' –¥–æ—Å—Ç—É–ø–µ–Ω!")
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        print("\nüì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞...")
        test_content = "Hello from Django! This is a test file for R2."
        test_key = "test/django-test.txt"
        
        s3_client.put_object(
            Bucket=bucket_name,
            Key=test_key,
            Body=test_content.encode('utf-8'),
            ContentType='text/plain',
            CacheControl='max-age=3600'
        )
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {test_key}")
        
        # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
        print("\nüì• –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
        response = s3_client.get_object(Bucket=bucket_name, Key=test_key)
        downloaded_content = response['Body'].read().decode('utf-8')
        
        if downloaded_content == test_content:
            print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
        else:
            print("‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
            return False
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        print("\nüóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª...")
        s3_client.delete_object(Bucket=bucket_name, Key=test_key)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        
        print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print(f"‚úÖ R2 bucket '{bucket_name}' –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
        return True
        
    except ClientError as e:
        error_code = e.response['Error']['Code']
        error_message = e.response['Error']['Message']
        
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ R2:")
        print(f"  - –ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}")
        print(f"  - –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
        
        if error_code == 'NoSuchBucket':
            print(f"üí° Bucket '{bucket_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ bucket.")
        elif error_code == 'InvalidAccessKeyId':
            print(f"üí° –ù–µ–≤–µ—Ä–Ω—ã–π Access Key. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ AWS_ACCESS_KEY_ID.")
        elif error_code == 'SignatureDoesNotMatch':
            print(f"üí° –ù–µ–≤–µ—Ä–Ω—ã–π Secret Key. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ AWS_SECRET_ACCESS_KEY.")
        elif error_code == 'AccessDenied':
            print(f"üí° –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ API —Ç–æ–∫–µ–Ω–∞.")
        
        return False
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == '__main__':
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.local
    try:
        from dotenv import load_dotenv
        load_dotenv('.env.local')
        print("üìÅ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env.local")
    except ImportError:
        print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env.local: {e}")
    
    test_r2_connection()
