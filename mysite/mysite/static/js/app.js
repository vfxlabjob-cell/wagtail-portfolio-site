console.log('üöÄ JavaScript —Ñ–∞–π–ª app.js –∑–∞–≥—Ä—É–∂–µ–Ω!');
console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
console.log('üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ .card-head-2-container:', document.querySelectorAll('.card-head-2-container').length);

document.addEventListener('DOMContentLoaded', function() {
    console.log('üì± DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
    gsap.registerPlugin(ScrollTrigger);

    // ========================================================================
    // --- –®–ê–ì 1: –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò –°–ö–†–û–õ–õ–ê ---
    // ========================================================================
    const scrollPosition = sessionStorage.getItem('scrollPosition');
    if (scrollPosition) {
        window.scrollTo(0, parseInt(scrollPosition, 10));
        sessionStorage.removeItem('scrollPosition');
    }

    // ========================================================================
    // --- –®–ê–ì 2: –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò –ü–ï–†–ï–î –ö–õ–ò–ö–û–ú ---
    // ========================================================================
    const filterControls = document.querySelector('.filter-controls');
    const filterContainer = document.querySelector('.filter-container');
    if (filterControls) {
        filterControls.addEventListener('click', function(e) {
            if (e.target.classList.contains('filter-btn')) {
                sessionStorage.setItem('scrollPosition', window.scrollY);
            }
        });
    }

    // –í–∫–ª—é—á–∞–µ–º —Å—Ç–µ–∫–ª—è–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –≤–Ω–∏–∑
    if (filterContainer) {
        const grid = document.querySelector('.portfolio-grid-full-width');
        const toggleGlass = () => {
            // –í–∫–ª—é—á–∞–µ–º —Å—Ç–µ–∫–ª–æ, –∫–æ–≥–¥–∞ –≤–µ—Ä—Ö —Ñ–∏–ª—å—Ç—Ä–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –æ–±–ª–∞—Å—Ç—å—é —Å–µ—Ç–∫–∏
            const overGrid = grid ? (window.scrollY + filterContainer.offsetHeight) > (grid.offsetTop - 1) : (window.scrollY > 10);
            if (overGrid) filterContainer.classList.add('is-glass');
            else filterContainer.classList.remove('is-glass');
        };
        toggleGlass();
        window.addEventListener('scroll', toggleGlass, { passive: true });
    }

    // ========================================================================
    // --- –ö–û–î –ê–ù–ò–ú–ê–¶–ò–ò ---
    // ========================================================================
    const animSettings = {
        duration: 0.9,
        staggerAmount: 0.06,
        easeType: "power4.out",
        staggerFrom: "center"
    };

    const cards = gsap.utils.toArray('.portfolio-card');
    const images = gsap.utils.toArray('.card-image');

    gsap.set(cards, { autoAlpha: 0 });
    gsap.set(images, { scale: 0.8 });

    ScrollTrigger.matchMedia({
        "(min-width: 1025px)": function() {
            setupRowAnimations(9);
        },
        "(min-width: 768px) and (max-width: 1024px)": function() {
            setupRowAnimations(4);
        },
        "(max-width: 767px)": function() {
            setupRowAnimations(2);
        }
    });

    function setupRowAnimations(numColumns) {
        for (let i = 0; i < cards.length; i += numColumns) {
            const rowCards = cards.slice(i, i + numColumns);
            const rowImages = rowCards.map(card => card.querySelector('.card-image'));

            const tl = gsap.timeline({
                scrollTrigger: {
                    trigger: rowCards[0],
                    start: "top 85%",
                    
                    // === –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ===
                    // –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é —Å—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
                    // –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ ScrollTrigger –¥–ª—è —ç—Ç–æ–≥–æ —Ä—è–¥–∞ –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è.
                    once: true,
                }
            });

            const staggerConfig = {
                each: animSettings.staggerAmount,
                grid: "auto",
                from: animSettings.staggerFrom
            };

            tl.to(rowCards, {
                autoAlpha: 1,
                duration: animSettings.duration,
                ease: animSettings.easeType,
                stagger: staggerConfig
            }, 0);

            tl.to(rowImages, {
                scale: 1,
                duration: animSettings.duration,
                ease: animSettings.easeType,
                force3D: true,
                rotation: 0.01,
                stagger: staggerConfig
            }, 0);
        }
    }

    // === –ú–æ–¥–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ: –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ Play ===
    const modal = document.getElementById('videoModal');
    const modalPlayer = document.getElementById('videoModalPlayer');
    const modalClose = document.getElementById('videoModalClose');
    let lastFocusedButton = null;

    const openModalWithUrl = (url) => {
        if (!modal || !modalPlayer || !url) return;
        document.body.style.overflow = 'hidden';
        modal.setAttribute('aria-hidden', 'false');
        modal.classList.add('is-open');
        modalPlayer.src = url;
        modalPlayer.muted = false;
        try {
            const p = modalPlayer.play();
            if (p && typeof p.then === 'function') p.catch(() => {});
        } catch (_) {}
    };

    const closeModal = () => {
        if (!modal || !modalPlayer) return;
        modal.classList.remove('is-open');
        modal.setAttribute('aria-hidden', 'true');
        try { modalPlayer.pause(); } catch (_) {}
        modalPlayer.removeAttribute('src');
        try { modalPlayer.load(); } catch (_) {}
        document.body.style.overflow = '';
        if (lastFocusedButton) {
            try { lastFocusedButton.focus(); } catch (_) {}
            lastFocusedButton = null;
        }
    };

    // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ Play –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
    document.addEventListener('click', (e) => {
        const playBtn = e.target.closest('.overlay-btn.js-play');
        if (playBtn) {
            e.preventDefault();
            e.stopPropagation();
            const url = playBtn.getAttribute('data-video-url');
            lastFocusedButton = playBtn;
            if (url) openModalWithUrl(url);
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
    if (modal) {
        modal.addEventListener('click', (e) => {
            if (e.target.hasAttribute('data-close-modal') || e.target === modal) closeModal();
        });
        document.addEventListener('keydown', (e) => { if (e.key === 'Escape') closeModal(); });
    }

    // === –¢–∞—á-–ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫: –ø–µ—Ä–≤—ã–π —Ç–∞–ø –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–≤–µ—Ä–ª–µ–π ===
    const isTouchCapable = ('ontouchstart' in window) || (navigator.maxTouchPoints > 0);
    if (isTouchCapable) {
        document.addEventListener('click', (e) => {
            const cardLink = e.target.closest('.portfolio-card');
            if (!cardLink) return;

            const overlayVisible = cardLink.classList.contains('touch-active');
            const isPlay = e.target.closest('.overlay-btn.js-play');
            const isAnyButton = e.target.closest('.overlay-btn');

            // –ï—Å–ª–∏ –æ–≤–µ—Ä–ª–µ–π –Ω–µ –≤–∏–¥–µ–Ω –∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥
            if (!overlayVisible && !isAnyButton) {
                e.preventDefault();
                e.stopPropagation();
                // –°–∫—Ä—ã—Ç—å —É –¥—Ä—É–≥–∏—Ö
                document.querySelectorAll('.portfolio-card.touch-active').forEach(el => el.classList.remove('touch-active'));
                cardLink.classList.add('touch-active');
                return;
            }

            // –ï—Å–ª–∏ –æ–≤–µ—Ä–ª–µ–π –≤–∏–¥–µ–Ω –∏ –∫–ª–∏–∫ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä—è—Ç–∞—Ç—å
            if (overlayVisible && !isAnyButton) {
                e.preventDefault();
                cardLink.classList.remove('touch-active');
                return;
            }

            // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ Play ‚Äî –º–æ–¥–∞–ª–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –≤—ã—à–µ (–∏ –º—ã —Å–Ω–∏–º–µ–º touch-active)
            if (isPlay) {
                cardLink.classList.remove('touch-active');
                return;
            }
        }, { passive: false });

        // –°–∫—Ä—ã–≤–∞—Ç—å –æ–≤–µ—Ä–ª–µ–π –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
        let lastY = window.scrollY;
        window.addEventListener('scroll', () => {
            if (Math.abs(window.scrollY - lastY) > 2) {
                document.querySelectorAll('.portfolio-card.touch-active').forEach(el => el.classList.remove('touch-active'));
                lastY = window.scrollY;
            }
        }, { passive: true });

        // –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏ ‚Äî —Ç–æ–∂–µ —Å–Ω—è—Ç—å
        document.addEventListener('click', (e) => {
            if (e.target.closest('.overlay-btn.js-play')) {
                document.querySelectorAll('.portfolio-card.touch-active').forEach(el => el.classList.remove('touch-active'));
            }
        });
    }

    // ========================================================================
    // --- –ö–û–ù–¢–ê–ö–¢–ù–´–ô –í–ò–î–ñ–ï–¢ ---
    // ========================================================================
    const contactWidget = document.getElementById('contactWidget');
    if (contactWidget) {
        const toggle = document.getElementById('contactToggle');
        const panel = document.getElementById('socialPanel');
        let isOpen = false;

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
        function togglePanel() {
            isOpen = !isOpen;
            
            if (isOpen) {
                panel.classList.add('contact-widget__panel--active');
                toggle.classList.add('contact-widget__toggle--active');
                toggle.setAttribute('aria-expanded', 'true');
                toggle.setAttribute('aria-label', '–ó–∞–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã');
                
                // –ò–∫–æ–Ω–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
            } else {
                panel.classList.remove('contact-widget__panel--active');
                toggle.classList.remove('contact-widget__toggle--active');
                toggle.setAttribute('aria-expanded', 'false');
                toggle.setAttribute('aria-label', '–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã');
            }
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ
        toggle.addEventListener('click', (e) => {
            e.stopPropagation();
            togglePanel();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –≤–∏–¥–∂–µ—Ç–∞
        document.addEventListener('click', (e) => {
            if (isOpen && !contactWidget.contains(e.target)) {
                togglePanel();
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && isOpen) {
                togglePanel();
            }
        });

        // Hover —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Å—Å—ã–ª–æ–∫
        const socialLinks = panel.querySelectorAll('.contact-widget__link');
        socialLinks.forEach(link => {
            link.addEventListener('mouseenter', function() {
                gsap.to(this, { 
                    scale: 1.1, 
                    duration: 0.2, 
                    ease: "power2.out" 
                });
            });
            
            link.addEventListener('mouseleave', function() {
                gsap.to(this, { 
                    scale: 1, 
                    duration: 0.2, 
                    ease: "power2.out" 
                });
            });
        });

        // –í–∏–¥–∂–µ—Ç –ø–æ—è–≤–ª—è–µ—Ç—Å—è –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
    }

    // ========================================================================
    // --- –ü–†–û–í–ï–†–ö–ê AMBIENT LIGHT –í CARD HEAD 2 –ë–õ–û–ö–ê–• ---
    // ========================================================================
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ Card Head 2 –±–ª–æ–∫–æ–≤...');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
    setTimeout(() => {
        const cardHead2Containers = document.querySelectorAll('.card-head-2-container');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ Card Head 2 –±–ª–æ–∫–æ–≤: ${cardHead2Containers.length}`);
        
        if (cardHead2Containers.length === 0) {
            console.warn('‚ö†Ô∏è Card Head 2 –±–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ –æ–Ω–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.');
            return;
        }
        
        cardHead2Containers.forEach((container, index) => {
            const ambientLight = container.querySelector('.card-head-2-ambient-light');
            const video = container.querySelector('.card-head-2-main-video');
            const canvas = container.querySelector('.card-head-2-color-canvas');
            
            console.log(`üé¨ –ë–ª–æ–∫ ${index + 1}:`, {
                container: !!container,
                ambientLight: !!ambientLight,
                video: !!video,
                canvas: !!canvas,
                videoId: video?.id,
                videoSrc: video?.src
            });
            
            if (ambientLight && video && canvas) {
                console.log('‚úÖ Ambient Light —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ambient light –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
                initializeAmbientLight(container, video, ambientLight);
            } else {
                console.warn('‚ùå Ambient Light —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:', {
                    ambientLight: !!ambientLight,
                    video: !!video,
                    canvas: !!canvas
                });
            }
        });
    }, 1000); // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
});

// ========================================================================
// --- –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò AMBIENT LIGHT ---
// ========================================================================
function initializeAmbientLight(container, video, ambientLight) {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ambient Light –¥–ª—è –≤–∏–¥–µ–æ:', video.id);
    
    const canvas = container.querySelector('.card-head-2-color-canvas');
    if (!canvas) {
        console.warn('‚ùå Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤');
        return;
    }
    
    console.log('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
    
    const ctx = canvas.getContext('2d');
    let colorAnalysisInterval;
    let isAnalyzing = false;
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å–º–µ—à–∏–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
    let currentColors = {
        primary: [128, 128, 128],   // –¢–µ–∫—É—â–∏–µ —Ü–≤–µ—Ç–∞ (—Å–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        secondary: [128, 128, 128],
        tertiary: [128, 128, 128]
    };
    const lerpSpeed = 0.1; // –°–∫–æ—Ä–æ—Å—Ç—å —Å–º–µ—à–∏–≤–∞–Ω–∏—è
    
    // –ò—Å—Ç–æ—Ä–∏—è —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
    const colorHistory = {
        primary: [],
        secondary: [],
        tertiary: []
    };
    const maxHistorySize = 5;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤ –∏–∑ –≤–∏–¥–µ–æ
    function extractDominantColors() {
        if (!video.videoWidth || !video.videoHeight) return null;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä canvas
        canvas.width = 64; // –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        canvas.height = 36;
        
        // –†–∏—Å—É–µ–º –∫–∞–¥—Ä –≤–∏–¥–µ–æ –Ω–∞ canvas
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const data = imageData.data;
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞
        const colorCounts = {};
        const sampleSize = 4; // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 4-–π –ø–∏–∫—Å–µ–ª—å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        for (let i = 0; i < data.length; i += sampleSize * 4) {
            const r = data[i];
            const g = data[i + 1];
            const b = data[i + 2];
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º —Ç–µ–º–Ω—ã–µ –∏ —Å–ª–∏—à–∫–æ–º —Å–≤–µ—Ç–ª—ã–µ –ø–∏–∫—Å–µ–ª–∏
            const brightness = (r + g + b) / 3;
            if (brightness < 30 || brightness > 225) continue;
            
            // –ö–≤–∞–Ω—Ç—É–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ—Ö–æ–∂–∏—Ö
            const quantizedR = Math.floor(r / 32) * 32;
            const quantizedG = Math.floor(g / 32) * 32;
            const quantizedB = Math.floor(b / 32) * 32;
            
            const colorKey = `${quantizedR},${quantizedG},${quantizedB}`;
            colorCounts[colorKey] = (colorCounts[colorKey] || 0) + 1;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞
        const sortedColors = Object.entries(colorCounts)
            .sort(([,a], [,b]) => b - a)
            .slice(0, 3)
            .map(([color]) => color.split(',').map(Number));
        
        return sortedColors;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å–º–µ—à–∏–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ (lerp)
    function lerpColor(current, target, t) {
        return [
            Math.round(current[0] + (target[0] - current[0]) * t),
            Math.round(current[1] + (target[1] - current[1]) * t),
            Math.round(current[2] + (target[2] - current[2]) * t)
        ];
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    function addColorToHistory(colorType, color) {
        colorHistory[colorType].push([...color]); // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if (colorHistory[colorType].length > maxHistorySize) {
            colorHistory[colorType].shift(); // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ü–≤–µ—Ç
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    function getAverageColor(colorType) {
        const history = colorHistory[colorType];
        if (history.length === 0) {
            return [128, 128, 128]; // –°–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —Ü–≤–µ—Ç–∞
        const sum = [0, 0, 0];
        for (const color of history) {
            sum[0] += color[0];
            sum[1] += color[1];
            sum[2] += color[2];
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        return [
            Math.round(sum[0] / history.length),
            Math.round(sum[1] / history.length),
            Math.round(sum[2] / history.length)
        ];
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ambient light —Å –ø–ª–∞–≤–Ω—ã–º —Å–º–µ—à–∏–≤–∞–Ω–∏–µ–º
    function updateAmbientLight(colors) {
        if (!colors || colors.length === 0) return;
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ –≤–∏–¥–µ–æ
        const newPrimary = colors[0];
        const newSecondary = colors[1] || newPrimary;
        const newTertiary = colors[2] || newSecondary;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        addColorToHistory('primary', newPrimary);
        addColorToHistory('secondary', newSecondary);
        addColorToHistory('tertiary', newTertiary);
        
        // –ü–æ–ª—É—á–∞–µ–º —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        const averagedPrimary = getAverageColor('primary');
        const averagedSecondary = getAverageColor('secondary');
        const averagedTertiary = getAverageColor('tertiary');
        
        // –ü–ª–∞–≤–Ω–æ —Å–º–µ—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–≤–µ—Ç–∞ —Å —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–º–∏
        currentColors.primary = lerpColor(currentColors.primary, averagedPrimary, lerpSpeed);
        currentColors.secondary = lerpColor(currentColors.secondary, averagedSecondary, lerpSpeed);
        currentColors.tertiary = lerpColor(currentColors.tertiary, averagedTertiary, lerpSpeed);
        
        // –°–æ–∑–¥–∞–µ–º RGB —Å—Ç—Ä–æ–∫–∏
        const primaryRgb = `rgb(${currentColors.primary[0]}, ${currentColors.primary[1]}, ${currentColors.primary[2]})`;
        const secondaryRgb = `rgb(${currentColors.secondary[0]}, ${currentColors.secondary[1]}, ${currentColors.secondary[2]})`;
        const tertiaryRgb = `rgb(${currentColors.tertiary[0]}, ${currentColors.tertiary[1]}, ${currentColors.tertiary[2]})`;
        
        // –°–æ–∑–¥–∞–µ–º —Ä–∞–¥–∏–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        const gradient = `radial-gradient(ellipse at center, 
            ${primaryRgb} 0%, 
            ${secondaryRgb} 30%, 
            ${tertiaryRgb} 60%, 
            transparent 100%)`;
        
        ambientLight.style.background = gradient;
        ambientLight.classList.add('active');
        
        console.log('Ambient Light –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ü–≤–µ—Ç–∞–º–∏:', {
            primary: primaryRgb,
            secondary: secondaryRgb,
            tertiary: tertiaryRgb
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    function analyzeColors() {
        if (isAnalyzing) return;
        isAnalyzing = true;
        
        const colors = extractDominantColors();
        if (colors) {
            console.log('üé® –ù–∞–π–¥–µ–Ω—ã —Ü–≤–µ—Ç–∞:', colors);
            updateAmbientLight(colors);
        } else {
            console.log('‚ö†Ô∏è –¶–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        isAnalyzing = false;
    }
    
    // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ –∏ –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤
    video.addEventListener('canplay', function() {
        console.log('üé• –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é, —Ä–∞–∑–º–µ—Ä—ã:', video.videoWidth, 'x', video.videoHeight);
        
        video.play().then(() => {
            console.log('‚ñ∂Ô∏è Card Head 2 –≤–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ —Å Ambient Light');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤ 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É (–∫–∞–∂–¥—ã–µ 100ms)
            setTimeout(() => {
                console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤...');
                colorAnalysisInterval = setInterval(() => {
                    if (!video.paused && !video.ended) {
                        analyzeColors();
                    }
                }, 100); // 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
            }, 500);
            
        }).catch((error) => {
            console.warn('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–¥–µ–æ:', error);
        });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è loadeddata
    video.addEventListener('loadeddata', function() {
        console.log('üìπ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä—ã:', video.videoWidth, 'x', video.videoHeight);
    });
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –ø–∞—É–∑–µ, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
    video.addEventListener('pause', function() {
        if (colorAnalysisInterval) {
            clearInterval(colorAnalysisInterval);
            colorAnalysisInterval = null;
        }
        // –£–±–∏—Ä–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π
        // ambientLight.classList.remove('active');
    });
    
    // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
    video.addEventListener('play', function() {
        if (!colorAnalysisInterval) {
            colorAnalysisInterval = setInterval(() => {
                if (!video.paused && !video.ended) {
                    analyzeColors();
                }
            }, 100); // 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
        }
    });
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–∏–¥–µ–æ
    video.addEventListener('ended', function() {
        if (colorAnalysisInterval) {
            clearInterval(colorAnalysisInterval);
            colorAnalysisInterval = null;
        }
        ambientLight.classList.remove('active');
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const projectName = video.getAttribute('data-project-name');
    const projectHeading = document.getElementById('project-heading');
    if (projectHeading && projectName) {
        projectHeading.textContent = projectName;
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
    container.addEventListener('beforeunload', function() {
        if (colorAnalysisInterval) {
            clearInterval(colorAnalysisInterval);
            colorAnalysisInterval = null;
        }
    });
}